import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class CashUnitGroupService {
    
    private final CashUnitGroupRepository cashUnitGroupRepository;

    public CashUnitGroupService(CashUnitGroupRepository cashUnitGroupRepository) {
        this.cashUnitGroupRepository = cashUnitGroupRepository;
    }

    public List<CashUnitGroup> getCashUnitGroups(
            List<Long> cashUnitIdList, 
            List<String> cashUnitGroupNameList, 
            List<Integer> cashUnitGroupPhysicalQuantityList) {
        
        Specification<CashUnitGroup> spec = Specification.where(null);
        
        if (cashUnitIdList != null && !cashUnitIdList.isEmpty()) {
            spec = spec.and(hasCashUnitIds(cashUnitIdList));
        }
        
        if (cashUnitGroupNameList != null && !cashUnitGroupNameList.isEmpty()) {
            spec = spec.and(hasGroupNames(cashUnitGroupNameList));
        }
        
        if (cashUnitGroupPhysicalQuantityList != null && !cashUnitGroupPhysicalQuantityList.isEmpty()) {
            spec = spec.and(hasPhysicalQuantities(cashUnitGroupPhysicalQuantityList));
        }
        
        return cashUnitGroupRepository.findAll(spec);
    }

    private Specification<CashUnitGroup> hasCashUnitIds(List<Long> cashUnitIdList) {
        return (root, query, criteriaBuilder) ->
                root.get("cashUnit").get("id").in(cashUnitIdList);
    }

    private Specification<CashUnitGroup> hasGroupNames(List<String> cashUnitGroupNameList) {
        return (root, query, criteriaBuilder) ->
                root.get("name").in(cashUnitGroupNameList);
    }

    private Specification<CashUnitGroup> hasPhysicalQuantities(List<Integer> cashUnitGroupPhysicalQuantityList) {
        return (root, query, criteriaBuilder) ->
                root.get("quantity").in(cashUnitGroupPhysicalQuantityList);
    }
}



@Mapper(componentModel = "spring" , uses = CashStockDeliveryHelper.class)
public interface CashStockResponseMapper {

    @Mapping(source = "id",target = "cashStockId")
    @Mapping(source = "type",target = "cashStockTypeName")
    @Mapping(source = "status",target = "cashStockStatusName")
    @Mapping(source = "amount",target = "cashStockAmount")
    @Mapping(source = "currencyCode",target = "cashStockCurrencyCode")
    @Mapping(source = "cashStockLastSessionId",target = "cashStockLastSessionId", qualifiedByName = "mapSessionToId")
    @Mapping(source = "unitRobiId",target = "unitRobiId")
    @Mapping(target = "cashStockTransportDaysCoinsName", expression = "java(helper.getTransportDay(cashStock, \"COINS\"))")
    @Mapping(target = "cashStockTransportDaysNotesName", expression = "java(helper.getTransportDay(cashStock, \"NOTES\"))")
    CashStockContext toDto(CashStock cashStock,@Context CashStockDeliveryHelper helper);

    @Named("mapSessionToId")
    default String mapSessionToId(CashStockSession session){
        return (session != null) ? String.valueOf(session.getId()) : null;
    }


    List<CashStockContext> toDtoList(List<CashStock> cashUnitStocks);

    default CashStockContextList mapToContextList(List<CashStock> entityList) {
        CashStockContextList contextList = new CashStockContextList();
        contextList.addAll(toDtoList(entityList));
        return contextList;
    }

    @Mapping(target = "cashStockContextList", source = "cashStockContextList")
    default CashStockResponse mapResponse(List<CashStock> cashStockContextList){
        CashStockResponse cashStockResponse = new CashStockResponse();
        cashStockResponse.setCashStockContextList(mapToContextList(cashStockContextList));
        return cashStockResponse;

    }
}

import org.mapstruct.Named;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.bnppf.adm.kash.repository.CashStockDeliveryRepository;

@Component
public class CashStockMapperHelper {

    @Autowired
    private CashStockDeliveryRepository cashStockDeliveryRepository;

    @Named("mapSessionToId")
    public static String mapSessionToId(CashStockSession session) {
        return (session != null) ? String.valueOf(session.getId()) : null;
    }

    @Named("mapTransportDaysCoins")
    public String mapTransportDaysCoins(Long cashStockId) {
        return cashStockDeliveryRepository.getTransportDay(cashStockId, "COINS");
    }

    @Named("mapTransportDaysNotes")
    public String mapTransportDaysNotes(Long cashStockId) {
        return cashStockDeliveryRepository.getTransportDay(cashStockId, "NOTES");
    }
}

