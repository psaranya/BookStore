Mapping data: 
closeVaultId must be an unique id in 7 digits of the closure for a day and for a branch. Example : 0000001 at the first closure, 0000002 at the second one and the day after the id could be 0000001 again. 
closeVaultCutList:
closeVaultTypeOfCut must be CashUnitMoneyTypeName of Cash Unit 
cashUnitIntegerValueAmount must be the  CashUnitIntegerValueAmount of Cash Unit  
cashRequestContentQuantity must be the cashUnitStockQuantity registered in Cash Unit Stock 
cashUnitDecimalValueAmount must be the CashUnitIntegerValueAmount of Cash Unit 



import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class CloseVaultMapper {
    public static CloseVaultRequest mapToMainframeRequest(List<CashUnitStockContext> cashUnitStockContextList, Map<String, CashUnit> cashUnitMap, String branchId) {
        CloseVaultRequest request = new CloseVaultRequest();
        request.setCloseVaultId(generateCloseVaultId(branchId));

        CloseVaultCutList cutList = new CloseVaultCutList();
        List<CloseVaultCutListContentInfo> cutListContents = cashUnitStockContextList.stream()
                .map(stock -> {
                    CashUnit cashUnit = cashUnitMap.get(stock.getCashUnitId()); // Fetch from DB Map
                    if (cashUnit != null) {
                        return createCutListContentInfo(stock, cashUnit);
                    }
                    return null;
                })
                .filter(content -> content != null)
                .collect(Collectors.toList());

        cutList.setCloseVaultCutListContentInfo(cutListContents);
        request.setCloseVaultCutList(cutList);
        
        return request;
    }

    private static CloseVaultCutListContentInfo createCutListContentInfo(CashUnitStockContext stock, CashUnit cashUnit) {
        CloseVaultCutListContentInfo contentInfo = new CloseVaultCutListContentInfo();
        contentInfo.setCloseVaultTypeOfCut(cashUnit.getCashUnitMoneyTypeName());
        contentInfo.setCashUnitIntegerValueAmount(cashUnit.getCashUnitIntegerValueAmount());
        contentInfo.setCashUnitDecimalValueAmount(cashUnit.getCashUnitIntegerValueAmount());
        contentInfo.setCashRequestContentQuantity(stock.getQuantity());
        return contentInfo;
    }

    private static synchronized String generateCloseVaultId(String branchId) {
        return String.format("%07d", (int) (Math.random() * 10000000)); // Generate Unique 7-digit ID
    }
}

