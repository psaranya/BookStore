@Slf4j
@Service
public class ValidationService {
    private final SFIdentityProvider sfIdentityProvider;
    private final CashStockRepository cashStockRepository;
    private final CashUnitRepository cashUnitRepository;
    private final CashStockSessionRepository cashStockSessionRepository;
    private final CashUnitStockRepository cashUnitStockRepository;
    private final CashStockEntityServiceClient cashStockEntityServiceClient;
    public ValidationService(SFIdentityProvider sfIdentityProvider, CashStockRepository cashStockRepository, CashUnitRepository cashUnitRepository, CashStockSessionRepository cashStockSessionRepository, CashUnitStockRepository cashUnitStockRepository, CashStockEntityServiceClient cashStockEntityServiceClient) {
        this.sfIdentityProvider = sfIdentityProvider;
        this.cashStockRepository = cashStockRepository;
        this.cashUnitRepository = cashUnitRepository;
        this.cashStockSessionRepository = cashStockSessionRepository;
        this.cashUnitStockRepository = cashUnitStockRepository;
        this.cashStockEntityServiceClient = cashStockEntityServiceClient;
    }
    public void validateInputData(CashStocksActivateContextRequest request) throws CashException {
        log.info("Validating input data for CashStockId: {}", request.getCashStockId());
        CashStockResponse cashStockResponse = cashStockEntityServiceClient.getCashStockById(Long.valueOf(request.getCashStockId()))
                .orElseThrow(() -> new CashException(Constants.FE_01, Constants.FE_01_DESC, HttpStatus.BAD_REQUEST, Constants.FE_ERROR, ""));
        Optional<CashStockContext> cashStockContext = cashStockResponse.getCashStockContextList().stream()
                .filter(context -> context.getCashStockId().equals(request.getCashStockId()))
                .findFirst();
        if (cashStockContext.isEmpty() || !Constants.STATUS_CLOSE.equalsIgnoreCase(cashStockContext.get().getCashStockStatusName())) {
            throw new CashException(Constants.FE_02, Constants.FE_02_DESC, HttpStatus.BAD_REQUEST,  Constants.FE_ERROR, "");
        }
        if (!cashStockContext.get().getCashStockAmount().equals(request.getCashStockOperationAmount()/100)) {
            throw new CashException(Constants.FE_05, Constants.FE_05_DESC, HttpStatus.BAD_REQUEST,  Constants.FE_ERROR, "");
        }
        // Validate CashUnitStock and Compute total cash value from provided CashUnitStocks
        BigDecimal totalCashValue = request.getCashUnitStockContextList().stream()
                .map(cus -> {
                    Optional<CashUnit> cashUnit = cashUnitRepository.findById(Long.parseLong(cus.getCashUnitId()));
                    return cashUnit.get().getValueAmount().multiply(BigDecimal.valueOf(cus.getCashUnitStockQuantity()));
                }).reduce(BigDecimal.ZERO,BigDecimal::add);
        //  Validate the computed amount with the requested CashStockOperationAmount
        if (!isTotalCashValueEqual(request.getCashStockOperationAmount(), totalCashValue)) {
            throw new CashException(Constants.FE_04,Constants.FE_04_DESC, HttpStatus.BAD_REQUEST,"error","");
        }
        CashStock cashStock = cashStockRepository.findById(Long.valueOf(request.getCashStockId()))
                .orElseThrow(() -> new CashException("Error","Last Session is null.", HttpStatus.BAD_REQUEST,"error",""));
        if(cashStock.getCashStockLastSessionId() == null){
            throw new CashException("Error","Last Session is null.", HttpStatus.BAD_REQUEST,"error","");
        }
        if (cashStock.getCashStockLastSessionId().getStatus().equalsIgnoreCase("OPEN")) {
            throw new CashException(Constants.FE_02,"CashStockStatusName of the provided CashStockId must be 'OPENED'.", HttpStatus.BAD_REQUEST,"error","");
        }
        validateCashUnitStocks(request);
        validateCashUnitStock(request);
    }
    private void validateCashUnitStocks(CashStocksActivateContextRequest request) throws CashException {
        List<Long> cashUnitIds = request.getCashUnitStockContextList().stream()
                .map(CashUnitStockContext::getCashUnitId)
                .map(this::convertToLong)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
        List<Long> validCashUnitIds = cashUnitRepository.findValidCashUnitIds(cashUnitIds);
        List<Long> invalidCashUnitIds = cashUnitIds.stream().filter(id -> !validCashUnitIds.contains(id)).collect(Collectors.toList());
        if (!invalidCashUnitIds.isEmpty()) {
            throw new CashException(Constants.FE_03, Constants.FE_03_DESC, HttpStatus.BAD_REQUEST,Constants.FE_ERROR, "");
        } }
   private void validateCashUnitStock(CashStocksActivateContextRequest request) throws CashException {
        log.info("Validating Cash Unit Stocks for CashStockId: {}", request.getCashStockId());
        Optional<CashStock> cashStock = cashStockRepository.findById(Long.valueOf(request.getCashStockId()));
        Optional<CashStockSession> cashStockSession =  cashStockSessionRepository.findById(cashStock.get().getCashStockLastSessionId().getId());
        CashUnitStockStageValue lastStageValue = cashStockSession.get().getLastCashUnitStockStageValueId();
        List<CashUnitStock> cashUnitStockList = cashUnitStockRepository.findCashUnitStockByLastStage(Long.valueOf(request.getCashStockId()),lastStageValue.getId());
       List<Long> cashUnitIds = request.getCashUnitStockContextList().stream().map(CashUnitStockContext::getCashUnitId)
                .map(this::convertToLong).filter(Objects::nonNull).toList();
        Set<Long> existingCashUnitsIds = cashUnitStockList.stream().map(cashUnitStock -> cashUnitStock.getCashUnit().getId()).collect(Collectors.toSet());
        List<Long> missingCashUnits = cashUnitIds.stream().filter(id -> !existingCashUnitsIds.contains(id)).toList();
        if (!missingCashUnits.isEmpty()) {
            throw new CashException("KASH_10000006", "The provided list of Cash Unit Stocks must match those in the last session.",
                    HttpStatus.BAD_REQUEST, "Validation error", "");
        }        log.info("Validation successful for CashStockId: {}", request.getCashStockId());   }
    private boolean isTotalCashValueEqual(Integer cashStockOperationAmount , BigDecimal totalCashValue) {
        BigDecimal operationAmount = BigDecimal.valueOf(cashStockOperationAmount/100);
        return (totalCashValue).compareTo(operationAmount) == 0;
    }
    private Long convertToLong(String value) {
        try {
            return Long.valueOf(value.trim());
        } catch (NumberFormatException ex) {
            return null;
        }    } }
